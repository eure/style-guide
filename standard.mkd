# 標準コーディング規約

標準コーディング規約はすべての言語の規準とする。

各言語毎に設けられたルールが存在する場合、それを優先すること。

- [スペース](#spacing)
- [命名規則](#naming)
- [変数](#variables)
- [制御構造](#conditionals)
- [演算式](#operations)
- [宣言](#declarations)
- [メソッド](#methods)
- [クラス](#class)
- [コメント](#comments)


## スペース <a name="spacing">

- **MUST**: インデントには半角スペースを4つ使用すること。水平タブを用いてはならない。
- **SHOULD**: 式の途中で改行を加える場合、改行したものは1レベル深いインデントを挿入すること
- **MUST**: 行末に半角スペース/水平タブを置いてはならない


## 命名規則 <a name="naming">

- **MUST**: 英単語は省略せずに使用すること。ただし、一般的な略語慣習的な名前については省略を許可する。
- **MUST**: 潜在的な曖昧さを回避し、違いを明確化する。
- **MUST**: スネーク/キャメル/パスカルケースについては各言語の標準とすること。


## 変数 <a name="variables">

- **SHOULD**: ローカル変数のスコープは最小限にすること。
- **SHOULD**: 変数の使い回しをしてはならない。使いまわすケースに遭遇した場合、それは分けた変数を定義可能である。


## 制御構造 <a name="conditionals">

- **MUST**: 複文の内容が1文であってもブレースを使用すること。
- **MUST**: 制御キーワードとブレースは同じ行に置くこと。
- **MUST**: 制御キーワードの後と開き括弧の間に半角スペース1つを置くこと。
- **MUST**: 閉じ括弧と開きブレースの間に半角スペース1つを置くこと。
- **SHOULD**: 条件式に否定や論理和などを使用する場合、ドモルガンの法則が使用できないか検討すること。

**Good**

```
if (something == nil) {
    // do stuff
} else {
    // do other stuff
}
```

**Not**

```
if (somethingIsBad) return;

if (somethingIsBad)
    return;
```


## 演算式 <a name="operations">

- **SHOULD**: 3項演算子を使用する場合、括弧で囲むこと。
- **MUST**: 3項演算子を入れ子にしてはならない。

```
Blah *blah = (stuff == thing ? foo : bar);
```


## 宣言 <a name="declarations">

- **SHOULD**: 名前が衝突しそうな場合、名前空間を使用すること。

**Good**

```
// C
int AwesomeGetTotal(int number) {
    // do something
}

// Golang
func AwesomeGetTotal(number int) int {
    // do something
}
```


## メソッド <a name="methods">

- **MUST**: アクセス修飾子は省略しないこと。
- **MUST**: 一つのメソッドに複数の処理を持たせないこと。
- **SHOULD**: メソッド内部にコメントが必要なコードは設計を見直すこと。コメントを必須としたコードはメソッドを分けるべきである。


## クラス <a name="class">

- **MUST**: アクセス修飾子は省略しないこと。


## コメント <a name="comments">

- **MUST**: コメントを使用する場合、識別子の後ろに空白を挿入すること

**Good**

```
// Something
```

**Not**

```
//Something
```

- **MUST**: ドキュメンテーションコメントは一行につき80文字とする
- **MUST**: ドキュメンテーションコメントは[TomDoc](http://tomdoc.org)を標準とする。

